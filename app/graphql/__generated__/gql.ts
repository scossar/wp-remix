/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\nquery GetPosts {\n    posts {\n        nodes {\n            id\n            title\n            content\n            date\n            slug\n            excerpt\n            author {\n                node {\n                    name\n                }\n            }\n            featuredImage {\n                node {\n                    caption\n                    description\n                    id\n                    sourceUrl\n                }\n            }\n        }\n    }\n}\n": types.GetPostsDocument,
    "\nquery ArchiveCursors($after: String!) {\n    posts (first: 100, after: $after, where: {orderby: {field:DATE, order: DESC}} ) {\n        pageInfo {\n            hasNextPage\n            endCursor\n            } \n        edges {\n            cursor\n        }\n    }\n}\n": types.ArchiveCursorsDocument,
    "\nquery ArchivePosts($after: String!) {\n    posts (first: 15, after: $after, where: {orderby: {field:DATE, order: DESC}}) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            id\n            title\n            date\n            slug\n            excerpt\n            author {\n              node {\n                name\n              }\n            }\n            featuredImage {\n              node {\n                altText\n                sourceUrl\n              }\n            }\n          }\n        }\n      }\n}\n": types.ArchivePostsDocument,
    "\nquery ArchiveQuery (\n    $first: Int\n    $last: Int\n    $after: String\n    $before: String\n    $categorySlug: String\n  ) {\n    posts(first: $first, last: $last, after: $after, before: $before, where: {categoryName: $categorySlug}) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          databaseId\n          title\n          date\n          slug\n          excerpt\n          author {\n            node {\n              name\n            }\n          }\n          featuredImage {\n            node {\n              altText\n              sourceUrl\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ArchiveQueryDocument,
    "\nquery GetPostBySlug ($id: ID!) {\n  post(id: $id, idType: SLUG) {\n    id\n    title\n    content\n    excerpt\n    slug\n    date\n    author {\n      node {\n        name\n      }\n    }\n    featuredImage {\n      node {\n        altText\n        description\n        caption\n        id\n        sourceUrl\n      }\n    }\n  }\n}\n": types.GetPostBySlugDocument,
    "\nquery getHomepagePosts {\n    tags (where: {name: \"featured\"}) {\n    edges {\n      node {\n        posts(first: 5, where: {orderby: {field: DATE, order: DESC}}) {\n          edges {\n            node {\n              id\n              title\n              slug\n              excerpt\n              date\n              author {\n                node {\n                  name\n                }\n              }\n              categories {\n                nodes {\n                  name\n                }\n              }\n              featuredImage {\n                node {\n                  caption\n                  description\n                  id\n                  sourceUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  categories {\n    edges {\n      node {\n        name\n        slug\n        posts(first: 5, where: {orderby: {field: DATE, order: DESC}}) {\n          edges {\n            node {\n              id\n              title\n              slug\n              excerpt\n              date\n              author {\n                node {\n                  name\n                }\n              }\n              featuredImage {\n                node {\n                  caption\n                  description\n                  id\n                  sourceUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetHomepagePostsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetPosts {\n    posts {\n        nodes {\n            id\n            title\n            content\n            date\n            slug\n            excerpt\n            author {\n                node {\n                    name\n                }\n            }\n            featuredImage {\n                node {\n                    caption\n                    description\n                    id\n                    sourceUrl\n                }\n            }\n        }\n    }\n}\n"): (typeof documents)["\nquery GetPosts {\n    posts {\n        nodes {\n            id\n            title\n            content\n            date\n            slug\n            excerpt\n            author {\n                node {\n                    name\n                }\n            }\n            featuredImage {\n                node {\n                    caption\n                    description\n                    id\n                    sourceUrl\n                }\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery ArchiveCursors($after: String!) {\n    posts (first: 100, after: $after, where: {orderby: {field:DATE, order: DESC}} ) {\n        pageInfo {\n            hasNextPage\n            endCursor\n            } \n        edges {\n            cursor\n        }\n    }\n}\n"): (typeof documents)["\nquery ArchiveCursors($after: String!) {\n    posts (first: 100, after: $after, where: {orderby: {field:DATE, order: DESC}} ) {\n        pageInfo {\n            hasNextPage\n            endCursor\n            } \n        edges {\n            cursor\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery ArchivePosts($after: String!) {\n    posts (first: 15, after: $after, where: {orderby: {field:DATE, order: DESC}}) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            id\n            title\n            date\n            slug\n            excerpt\n            author {\n              node {\n                name\n              }\n            }\n            featuredImage {\n              node {\n                altText\n                sourceUrl\n              }\n            }\n          }\n        }\n      }\n}\n"): (typeof documents)["\nquery ArchivePosts($after: String!) {\n    posts (first: 15, after: $after, where: {orderby: {field:DATE, order: DESC}}) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            id\n            title\n            date\n            slug\n            excerpt\n            author {\n              node {\n                name\n              }\n            }\n            featuredImage {\n              node {\n                altText\n                sourceUrl\n              }\n            }\n          }\n        }\n      }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery ArchiveQuery (\n    $first: Int\n    $last: Int\n    $after: String\n    $before: String\n    $categorySlug: String\n  ) {\n    posts(first: $first, last: $last, after: $after, before: $before, where: {categoryName: $categorySlug}) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          databaseId\n          title\n          date\n          slug\n          excerpt\n          author {\n            node {\n              name\n            }\n          }\n          featuredImage {\n            node {\n              altText\n              sourceUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery ArchiveQuery (\n    $first: Int\n    $last: Int\n    $after: String\n    $before: String\n    $categorySlug: String\n  ) {\n    posts(first: $first, last: $last, after: $after, before: $before, where: {categoryName: $categorySlug}) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          databaseId\n          title\n          date\n          slug\n          excerpt\n          author {\n            node {\n              name\n            }\n          }\n          featuredImage {\n            node {\n              altText\n              sourceUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetPostBySlug ($id: ID!) {\n  post(id: $id, idType: SLUG) {\n    id\n    title\n    content\n    excerpt\n    slug\n    date\n    author {\n      node {\n        name\n      }\n    }\n    featuredImage {\n      node {\n        altText\n        description\n        caption\n        id\n        sourceUrl\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetPostBySlug ($id: ID!) {\n  post(id: $id, idType: SLUG) {\n    id\n    title\n    content\n    excerpt\n    slug\n    date\n    author {\n      node {\n        name\n      }\n    }\n    featuredImage {\n      node {\n        altText\n        description\n        caption\n        id\n        sourceUrl\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getHomepagePosts {\n    tags (where: {name: \"featured\"}) {\n    edges {\n      node {\n        posts(first: 5, where: {orderby: {field: DATE, order: DESC}}) {\n          edges {\n            node {\n              id\n              title\n              slug\n              excerpt\n              date\n              author {\n                node {\n                  name\n                }\n              }\n              categories {\n                nodes {\n                  name\n                }\n              }\n              featuredImage {\n                node {\n                  caption\n                  description\n                  id\n                  sourceUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  categories {\n    edges {\n      node {\n        name\n        slug\n        posts(first: 5, where: {orderby: {field: DATE, order: DESC}}) {\n          edges {\n            node {\n              id\n              title\n              slug\n              excerpt\n              date\n              author {\n                node {\n                  name\n                }\n              }\n              featuredImage {\n                node {\n                  caption\n                  description\n                  id\n                  sourceUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery getHomepagePosts {\n    tags (where: {name: \"featured\"}) {\n    edges {\n      node {\n        posts(first: 5, where: {orderby: {field: DATE, order: DESC}}) {\n          edges {\n            node {\n              id\n              title\n              slug\n              excerpt\n              date\n              author {\n                node {\n                  name\n                }\n              }\n              categories {\n                nodes {\n                  name\n                }\n              }\n              featuredImage {\n                node {\n                  caption\n                  description\n                  id\n                  sourceUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  categories {\n    edges {\n      node {\n        name\n        slug\n        posts(first: 5, where: {orderby: {field: DATE, order: DESC}}) {\n          edges {\n            node {\n              id\n              title\n              slug\n              excerpt\n              date\n              author {\n                node {\n                  name\n                }\n              }\n              featuredImage {\n                node {\n                  caption\n                  description\n                  id\n                  sourceUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;